{"version":3,"sources":["components/Header/index.js","components/Header/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","onSubmit","this","props","type","name","placeholder","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","e","preventDefault","setState","username","target","value","screen_name","state","_timeline","dist","dataSource","sourceType","screenName","options","height","width","onLoad","console","log","components_Header","bind","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAEeA,0LCGP,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,QAAME,SAAUC,KAAKC,MAAMF,UACvBJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOJ,UAAU,eAAeK,KAAK,WAC1CC,YAAY,cAEvBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOJ,UAAU,eAAeK,KAAK,cAC1CC,YAAY,iBAEvBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BAAlB,8BAlBnBO,sBC6CNC,sBA1CX,SAAAA,EAAYL,GAAO,IAAAM,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAR,KAAAM,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAZ,KAAMC,KAOVF,SAAW,SAACc,GACRA,EAAEC,iBACFP,EAAKQ,SAAS,CACVC,SAAUH,EAAEI,OAAOD,SAASE,MAC5BC,YAAaN,EAAEI,OAAOE,YAAYD,SAVtCX,EAAKa,MAAQ,CACTJ,SAAU,GACVG,YAAa,IAJFZ,wEAkBf,IAAMc,EAAarB,KAAKoB,MAAMJ,UAAYhB,KAAKoB,MAAMD,YAAexB,EAAAC,EAAAC,cAACyB,EAAA,SAAD,CAChEC,WAAY,CACRC,WAAY,UACZC,WAAYzB,KAAKoB,MAAMD,aAE3BO,QAAS,CACLV,SAAUhB,KAAKoB,MAAMJ,SACrBW,OAAQ,OACRC,MAAO,QAEXC,OAAQ,kBAAMC,QAAQC,IAAI,0BACzB,GACL,OACIpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACmC,EAAD,CACIhB,SAAUhB,KAAKoB,MAAMJ,SACrBG,YAAanB,KAAKoB,MAAMD,YACxBpB,SAAUC,KAAKD,SAASkC,KAAKjC,QAChCqB,UArCChB,cCOE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.14520a0a.chunk.js","sourcesContent":["import Header from \"./Header.jsx\";\n\nexport default Header\n","import \"./Header.scss\"\nimport React, {Component} from \"react\";\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className=\"app-header\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <form onSubmit={this.props.onSubmit}>\n                                <div className=\"form-row\">\n                                    <div className=\"col\">\n                                        <input type=\"text\" className=\"form-control\" name=\"username\"\n                                               placeholder=\"Username\"/>\n                                    </div>\n                                    <div className=\"col\">\n                                        <input type=\"text\" className=\"form-control\" name=\"screen_name\"\n                                               placeholder=\"Screen Name\"/>\n                                    </div>\n                                    <div className=\"col-auto\">\n                                        <button className=\"btn btn-primary btn-block\">Get Timeline</button>\n                                    </div>\n                                </div>\n\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </header>\n        )\n    }\n}\n\nexport default Header;\n","import React, {Component} from 'react';\nimport Header from \"./components/Header\"\nimport {Timeline} from \"react-twitter-widgets\";\nimport './App.scss';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            screen_name: ''\n        }\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.setState({\n            username: e.target.username.value,\n            screen_name: e.target.screen_name.value\n        });\n    }\n\n\n    render() {\n        const _timeline = (this.state.username && this.state.screen_name) ? <Timeline\n            dataSource={{\n                sourceType: 'profile',\n                screenName: this.state.screen_name\n            }}\n            options={{\n                username: this.state.username,\n                height: '100%',\n                width: '100%'\n            }}\n            onLoad={() => console.log('Timeline is loaded!')}\n        /> : \"\";\n        return (\n            <div className=\"App\">\n                <Header\n                    username={this.state.username}\n                    screen_name={this.state.screen_name}\n                    onSubmit={this.onSubmit.bind(this)}/>\n                {_timeline}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}